<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ringo Cheung]]></title>
  <link href="http://ringfather.github.io/atom.xml" rel="self"/>
  <link href="http://ringfather.github.io/"/>
  <updated>2015-01-23T15:38:48-05:00</updated>
  <id>http://ringfather.github.io/</id>
  <author>
    <name><![CDATA[Ringo Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YNCN Interviews - Freddy Chen]]></title>
    <link href="http://ringfather.github.io/blog/2015/01/23/yncn-interviews-freddy-chen/"/>
    <updated>2015-01-23T14:53:04-05:00</updated>
    <id>http://ringfather.github.io/blog/2015/01/23/yncn-interviews-freddy-chen</id>
    <content type="html"><![CDATA[<p>Ringo: This is the first post in what I hope to be a series of interviews with successful alumni from UofT Engineering. The idea of these posts is to give students an idea of the different paths these alumni have taken to get to where they are in their career now. Hopefully, the ideas and techniques in these posts will help you in your own job search! Please feel free to send any feedback to <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x72;&#x69;&#110;&#x67;&#111;&#x2e;&#x63;&#x68;&#x65;&#x75;&#x6e;&#103;&#64;&#x79;&#x6f;&#x75;&#x72;&#x65;&#x6e;&#101;&#120;&#x74;&#x2e;&#99;&#x61;">&#x72;&#x69;&#x6e;&#x67;&#111;&#x2e;&#x63;&#x68;&#x65;&#x75;&#110;&#x67;&#64;&#x79;&#x6f;&#x75;&#114;&#101;&#x6e;&#101;&#120;&#116;&#x2e;&#99;&#x61;</a></p>

<h6>Introduction</h6>

<br>


<p>Hi everyone! My name is Freddy. I’m an ECE1T3T1. I didn’t do PEY, but I still took a year off. We’ll get to that later. I’m currently a Software Engineer at Airbnb. I interned at Facebook, Fixmo, and Altera. I also spent a summer working on my own startup with The Next 36.</p>

<!--more-->


<p>I remember when I first got to the University of Toronto&hellip; I had no idea what I wanted to do. There were a lot of things that I learned along the way, so I will try my best to pass on some knowledge and advice. I’ll start with some standard You’re Next questions, then answer some questions I’ve gotten from a lot of younger students over the years.</p>

<p>Oh, and before we begin, just know that there are many ways to succeed. You can choose to ignore everything that I say and still be fine. These are some things that I did to get me started in the software industry.</p>

<h6>Q: What was on your resume?</h6>

<br>


<p>You can check out my LinkedIn account <a href="https://www.linkedin.com/in/freddychen">here</a>.I honestly don’t know why these haven’t replaced resumes yet&hellip; they’re so much better in every way!</p>

<p>For paper resumes, I tried to keep my stuff to one page. Your most relevant and impressive experiences can most likely be summed up in one page. There are plenty of resources online about what you should have in your resume. Go look them up!</p>

<p>Oh, the most common question that I get is probably “Does my GPA matter?”. The answer is a resounding YES… of course it matters. Everything on your resume is a signal for whether or not you should be hired (otherwise it’s probably a waste of space…). Don’t be discouraged if you have a low GPA though. Highlight your other strengths and experiences and let those shine through!</p>

<h6>Q: How did you apply for your jobs?</h6>

<br>


<p>My friend hates getting this question because his answer is “I applied online”. And guess what? My answer is actually the same! But okay, there are some tricks (obviously very specific to the software industry).</p>

<p>If you’re looking at big companies in Canada, chances are the PEY office has partnerships already (IBM, AMD, etc.). If you’re looking for big companies in the US (Google, Apple, Microsoft, Amazon, etc.), usually applying online will get you an interview if your resume looks good. Having friends who’ve interned at those companies help as well. They can refer you to their recruiter.</p>

<p>If you’re looking to get into the cool and hip startups in Silicon Valley, you can try looking at the portfolios of Venture Capital companies and applying online. Again, referrals help here.</p>

<p>The best way of applying for jobs I think is through networking. I had friends who worked in Silicon Valley that connected me with a recruiter for a Venture Capital firm. That’s how I got considered for Facebook and Airbnb.</p>

<h6>Q: How did you prepare for interviews?</h6>

<br>


<p>I practiced a lot of coding on paper and on the computer. I reviewed computer science concepts and practiced explaining them. I bought <a href="http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X">Cracking the Coding Interview</a> and practiced from that. I didn’t read the whole book, but I understood a lot of the basics. I went on glassdoor.com and careercup.com to look up interview questions. I never did any practice on topcoder. I did mock interviews with my friends (as the interviewer and interviewee).</p>

<p>You should do whatever you need to do to feel prepared though. Everyone learns differently.</p>

<h6>Q: What would you do differently if you could go back in time?</h6>

<br>


<p>I wish I prepared harder in first year and second year to try to get a job. Don’t believe it when people tell you that companies don’t hire first or second years. Companies look for specific skills and experiences, not what year of university you’re in. However, if you don’t have any significant skills or experiences, the year of university that you’re in is used as a proxy. If you are able to prove that you qualify for the job and that you’re one of their best candidates, you will get the job.</p>

<p>The first coding interview I walked into was with Microsoft. I totally bombed it because I had no idea what to expect. Always go prepared!</p>

<h6>Q: Should I do PEY?</h6>

<br>


<p>If you’re interested in being in the software industry, probably not. A lot of software engineering intern projects are well scoped out and only last a couple of months. You don’t need 12 to 16 months to learn the ropes and ship something meaningful.</p>

<p>Ever wonder why there are so many more Waterloo software engineers down in Silicon Valley? Their co-op program is designed to maximize the amount of work experience you have before you graduate by alternating between work and school every 4 months. By the time a Waterloo software engineer graduates, they have probably already worked for around 4-6 different companies. Waterloo has built up such a good reputation that a lot of first years there with little to no experience are able to get jobs as QA engineers at the very least.</p>

<p>So what can aspiring software engineers from U of T do to catch up? And yes, I’m using the term “catch up” because let’s face it, the software engineers from Waterloo are killing it. What we can do is to take a year off instead of doing PEY, and try filling that time with internships with different companies. If you’re really good you can probably work at 3-4 differen companies. Some companies aren’t very open to this (Microsoft wouldn’t hire me outside of the summer… they would only do it for Waterloo engineers), but you should try anyway. Worst case scenario, you should at least try for a 12 month work term plus a summer internship.</p>

<h6>Q: I want to just chill for a summer. Can I do that?</h6>

<br>


<p>You can do anything you want, but there’s a big chance you’re going to fall behind some of your peers in terms of work or research experience. Whether you like it or not, you’re at a pretty critical time in your life, and if you don’t want to fall behind, you should try your best to maximize your chance for success.</p>

<p>I’m going to do my own startup because I have this amazing idea and I want to change the world.</p>

<p>Awesome. Canada needs more entrepreneurs like you. I would advise you to really put everything you got into it though. If you’re going to do a startup for 4 or 12 or 16 months, make sure you put your all into it. Be prepared to postpone school if things go well. I strongly believe you won’t make it big if you’re half-assing it, doing it on the side, doing it temporarily, doing it cause everyone else is doing it, or anything like that. Choose something that you strongly believe in, do the research, make sure your idea makes sense, and then put your all into it.</p>

<h6>Q: I have no work experience, my resume is meh, and I don’t know anyone that can refer me to any awesome companies. What do I do?</h6>

<br>


<p>Network. Go out there and meet people. Maybe you don’t think you have enough talent or experience to offer, maybe you’re too shy, maybe your parents are telling you to study, maybe your friends are having an awesome party that you have to go to, but think about it: this is your career and your future. If you’re serious about getting a great job out of school, then I would say that the upside to putting yourself out there is much greater than being embarrassed by your peers, falling a little behind in class, or missing out on an awesome party. Remember: you miss 100% of the shots that you don’t take.</p>

<p>Oh, and for the record, if networking opportunities present themselves at parties, definitely go to those instead of studying an extra 3-4 hours for something you’ve already studied a lot for. Meeting people and nurturing relationships in university is critical for success after university.</p>

<p>Once you meet some people you can look up to, ask them for help. Ask them how they got there, and ask them to mentor you. Take their advice and go spend the time to improve your skills. Nobody starts out at a superstar. Set consistent goals for yourself and go achieve them! You can do it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Diagnosis]]></title>
    <link href="http://ringfather.github.io/blog/2014/12/22/reflection/"/>
    <updated>2014-12-22T17:24:34-05:00</updated>
    <id>http://ringfather.github.io/blog/2014/12/22/reflection</id>
    <content type="html"><![CDATA[<p>Lately, I&rsquo;ve read a lot about the value of doing reflection and self-diagnosis to constantly strive for self-improvement. I wanted to experiment a little, and the first step is to get some of my thoughts down right now so I can analyze them in the future. In this post, I&rsquo;ll be doing a reflection of the last four months of my life (2F EngSci). Specifically, I want to focus on how I dramatically changed my attitude towards education and how it&rsquo;s paid off, as well as how I was able to land a summer internship at Microsoft in software engineering.</p>

<!--more-->


<p>Let&rsquo;s start with school. Before this school year began, I had already decided that the attitude I had last year was toxic &ndash; caring more about my grades than understanding the material. That in itself could be an entire blog post, but I&rsquo;ll focus instead on how I changed that attitude and the results I saw from it.</p>

<p>First off, I resolved to maintain a positive attitude towards learning this year. I strongly believe in the idea that if you keep telling yourself something, you will believe it. The thing that I told myself was: I&rsquo;m not going to worry about my grades, but I will try to truly understand everything that I am being taught. This is harder than it sounds, because I, like most people I know, have been conditioned my entire life to get good grades so that I could get into a good university and get a good job. Adopting this strategy, I attended 95%+ of my classes, as opposed to last school year when I attended about 70%, while feeling less stressed out, almost never cramming and scoring ~7% better on my overall average compared to 1W.</p>

<p>Something that I tried that was a little more unconventional was living without Wifi this last semester &ndash; the only form of internet I had at home was my 6 GB of mobile data. I was actually quite happy with this decision even though people I spoke to found it appalling. I have come to appreciate that seemingly unlimited wireless internet is not necessary, in fact, I was able to do all the important things in my life while remaining under this 6GB limit, going over only when I chose to do time-wasting things like watch Youtube videos for a few hours. In fact, I believe in this so strongly that I will return to school in 2W with the same 6GB of internet per month.</p>

<p>Next I will talk about finding a job. To me, getting a job is a two-step process. The first step is getting in the door &ndash; getting an interview &ndash; while the second step is convincing the company that you should be hired. In regards to the first step, I found that my chances were significantly higher when I was able to meet with a recruiter face-to-face. Out of the 6 companies that I met with in real life, 3 of them interviewed me. This is in contrast to the 9 companies that I applied to online, all of which either rejected me or did not respond to me. This leads me into my second lesson learned &ndash; pitching. Now I am by no means an expert in the art of pitching, quite the contrary actually, but I tried something unconventional that worked: I went around career fairs and events with my <a href="http://ringocheung.pythonanywhere.com/ExpenSe/">app</a> opened on my tablet and started my conversation with recruiters talking about the app. For resumes, I recommend <a href="http://www.thegoogleresume.com/">The Google Resume</a>, I learned most of my resume knowledge there. My resume is on the blog <a href="http://ringocheung.github.io/RingoCheungResume.pdf">here</a>.</p>

<p>For the second step, I recommend for those looking at software positions (but to be honest any position will be similar because you will be problem solving) to practice problem solving. Engineering students are fortunate here because they hone their problem solving skills in their day to day studies. Regardless, you should be practicing for your interviews. I put in around 40 hours preparing for interviews this semester. Not only did it help me land a job, but it also renewed my passion for problem solving. Another important note is that it is not about getting the correct answer in interviews. In fact, at my final round interviews for Microsoft, I did not answer all the questions correctly (to be honest, I answered embarrassingly few of them correctly), but I was stil able to land the job because I really focussed on communicating my problem solving process clearly, and articulating my passion for software engineering and problem solving. I recommend the book <a href="http://www.careercup.com/book">Cracking the Coding Interview</a> for practicing for software interviews &ndash; it certainly worked for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working as a Developer for RBC Capital Markets]]></title>
    <link href="http://ringfather.github.io/blog/2014/08/30/working-as-a-developer-for-rbc-capital-markets/"/>
    <updated>2014-08-30T08:39:25-04:00</updated>
    <id>http://ringfather.github.io/blog/2014/08/30/working-as-a-developer-for-rbc-capital-markets</id>
    <content type="html"><![CDATA[<p>A little over three months ago, I was fortunate enough to land a software development position at RBC Capital Markets. Yesterday was my last day, and I woke up this morning feeling a little nostalgic, so I decided to write this post to share my experience working as a software developer for RBC.</p>

<p>So what did I do in my three months? Well, here&rsquo;s the summary of duties and work performed that I put on my Practical Experience Form (PER) &ndash; a mandatory experience requirement that engineering students have to complete before graduating:</p>

<!--more-->


<ol>
<li>Applied TDD techniques to develop testing utility that is currently being used for over 80 business reports, directly identifying a critical bug before production release</li>
<li>Utilized OOP techniques to implement functional enhancements to web application used by entire team of 40+, which included designing SQL Server database tables, implementing an ORM and application logic, and designing a UI, automating 250+ tasks and directly reducing the time required to complete one of these tasks by 90%  on average</li>
<li>Built a data extraction utility to generate 1000+ pages of database documentation, directly facilitating data mapping tasks of a team of 4</li>
<li>Created and presented software enhancements proposal to two team leads resulting in approval to make enhancements to existing application</li>
</ol>


<p>A quick list of the tools and techniques I used include:</p>

<p>Visual Studio 2008 &amp; 2010, Microsoft SSRS, SSIS &amp; SSMS, API&rsquo;s (including Atlassian&rsquo;s Confluence and Microsoft SSRS), SQL Server, Test Driven Development, Unit Testing, Python, Object Oriented Programming, Subversion, Continuous Integration Tool (Jenkins)</p>

<p>If you&rsquo;ll notice, I actually did a lot of programming for RBC, for which I count myself extremely lucky. It was extremely satisfying to build the testing utility, and then see it run several times a day through our continuous integration testing tool and actually help us identify bugs in our reports. Similarly, creating and presenting a software enhancement proposal and then actually working on the enhancements and delivering a usable product during my term was extremely awesome.</p>

<p>Here are a few things I learned in the last three months:</p>

<ul>
<li>Your internship can be as good or bad as you make it. I remember there were some days where I wasn&rsquo;t assigned much work, but I went out of my way to bug my supervisor to give me more. This attitude of wanting to contribute definitely helped me get bigger projects to work on.</li>
<li>Ask people for help! I remember I was pretty intimidated by all the senior developer towards the beginning, but they were all actually very nice and willing to help. Some even went out of their way to help me out!</li>
<li>At the same time, try to figure things out on your own before asking for help. No one likes that co-op who asks trivial questions and wastes everyone&rsquo;s time. Google + Stack Overflow can answer 90%+ of your software problems. For the remaining 10%&ndash;, ask away.</li>
<li>Design your code. There are many ways to write a program, but I learned that picking which way is important. For instance, you probably want to use objects most of the time and modularize your code. You also want to write unit tests, lots of unit tests.</li>
<li>Version control is extremely important. Commit all your work, and make sure it passes the build tests before you go home for the day.</li>
</ul>


<p>All in all, I count my experience as very positive &ndash; I was given a chance to use what I learned in school to build solutions, and learned a ton about a field that I am considering for my career. I want to thank everyone who helped me during my time at RBC if they ever read this, and those who helped me get the job, you know who you are. This has definitely been one of my better summers (2012 was pretty awesome as well), and I look forward to the next one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expen$e: My First Web App]]></title>
    <link href="http://ringfather.github.io/blog/2014/08/14/expenSe-my-first-web-app/"/>
    <updated>2014-08-14T22:22:52-04:00</updated>
    <id>http://ringfather.github.io/blog/2014/08/14/expenSe-my-first-web-app</id>
    <content type="html"><![CDATA[<p>Project deployed at: <a href="http://ringocheung.pythonanywhere.com/ExpenSe/">Expen$e</a><br/>
Check out the code on Github <a href="https://github.com/ringocheung/ExpenSe ">here</a></p>

<p>The idea for <a href="http://ringocheung.pythonanywhere.com/ExpenSe/">Expen$e</a> came from a conversation with a friend about how difficult it is to record expenses with traditional apps. We quickly agreed on the annoyance of having to perform more than 2 actions to record an expense. It made no sense to me that an expense tracking app did not allow for easy expense tracking. As a user, I want to be able to record expenses as easily as possible. This desire drove two key design decisions: macros and single box input.</p>

<p>Macros are not anything new. They are typically used as shortcuts &ndash; in this case a letter replaces an expense name. Instead of having to type in &lsquo;utilities&rsquo;, Expen$e allows you to set the &lsquo;u&rsquo; macro to utilities and then type in &lsquo;u&rsquo; instead.</p>

<!--more-->


<p>To further optimize the recording process, only one input box is used &ndash; with no delimiters. This design decision makes it even easier to record and expense, instead of having to type &lsquo;u&rsquo; and &lsquo;15&rsquo; in separate boxes or even &lsquo;u/15&rsquo; in one box, Expen$e allows the user to type in &lsquo;u15&rsquo; in one box and it will recognize that the user is trying to record a utilities expense of $15. Descriptions are also supported in the following format: &lsquo;u15Electricity bill for the month of October&rsquo;. This meant a regex (always fun) in the decoding engine but the added simplicity for the user was in my opinion a good tradeoff.</p>

<p>The rest of the application is a pretty standard CRUD app, allowing users to set a recurring monthly budget and displaying how much is remaining/used out of that budget.</p>

<p>Lessons learned:<br/>
1. Web apps are really fun to build &ndash; Self-explanatory :)<br/>
2. The 80/20 rule is real &ndash; The last 20% of the app took 80% of the time. Well, that&rsquo;s an exaggeration but you get my point: It was a lot harder to implement &lsquo;details&rsquo; than it was to get the app working.<br/>
3. Make code as modular as you can &ndash; package related functions into modules, always try to build part by part and test your parts before putting them into the big machine. I was taught this in school but never realized how true it was until I actually needed to debug my app&hellip;<br/>
4. Use a file to log your progress and plan the application &ndash; This helped me a lot because I would sit down to work and already know what I needed to do instead of waste time thinking about what feature to implement every time.<br/>
5. Keep photos of progress and write the blog post AS I&rsquo;m doing the project, not after.</p>

<p>Biggest challenge: getting started.<br/>
Honestly had a tough time committing to this project. I was pretty tired after work every, getting home at 6:30 and wanting to just relax. You can even see from my github commits I was committing only once or twice a week for the first few weeks. However, once I started building more and more, I wanted to build more and more and put this thing together so I could use it (selfish, I know). By overcoming this challenge and actually completing this project, I feel like every other project I start will be easier because I know I&rsquo;ve completed one before and actually had a lot of fun.</p>

<p>Big thanks to the <a href="http://www.tangowithdjango.com/">tango with django tutorial</a> and <a href="http://www.pythonanywhere.com">Python Anywhere&rsquo;s hosting service</a>. Extremely helpful for building your first Django webapp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About]]></title>
    <link href="http://ringfather.github.io/blog/2014/05/27/about/"/>
    <updated>2014-05-27T13:20:41-04:00</updated>
    <id>http://ringfather.github.io/blog/2014/05/27/about</id>
    <content type="html"><![CDATA[<p>Hi there, I&rsquo;m Ringo and I study engineering science at the University of Toronto. In my first year of university, I learned how to write code and really enjoyed it. This summer, I am working for RBC full-time writing code in the Capital Markets division. Outside of school and work, I also paddle for the Iron Dragons, University of Toronto Engineering&rsquo;s dragon boat team. In my free time, I like to play and build with code, play board games or toss a disc around.</p>

<!--more-->


<p>I started this blog to share the projects that I work on, as well as my own engineering journey. I&rsquo;ve found a lot of other people&rsquo;s blogs to be extremely helpful as a budding software engineer and I want to share my knowledge &amp; experiences as well. Blogs like these make software such an awesome field because people are open to sharing what they know, ultimately driving the entire community of hackers forward. That is what this blog aspires to be.</p>

<p>Do not hesitate to contact me, whether for work-related inquiries or just to chat. You can hit me up on my Twitter or LinkedIn below. My portfolio will be out sometime before September.</p>

<p>Cheers,</p>

<p>Ringo</p>

<p>P.S. Huge thanks to Karen Keung, my awesome graphic designer friend. She designed this blog. Check out her work <a href="http://www.karenkeung.com/">here</a>, it&rsquo;s cool I promise. We only spent ~6 hours coding this blog up thanks to <a href="http://octopress.org/">Octopress</a> and <a href="https://github.com/vladigleba/readify">Readify</a>.</p>
]]></content>
  </entry>
  
</feed>
