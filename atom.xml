<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ringo Cheung]]></title>
  <link href="http://ringfather.github.io/atom.xml" rel="self"/>
  <link href="http://ringfather.github.io/"/>
  <updated>2014-08-31T17:25:48-04:00</updated>
  <id>http://ringfather.github.io/</id>
  <author>
    <name><![CDATA[Ringo Cheung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working as a Developer for RBC Capital Markets]]></title>
    <link href="http://ringfather.github.io/blog/2014/08/30/working-as-a-developer-for-rbc-capital-markets/"/>
    <updated>2014-08-30T08:39:25-04:00</updated>
    <id>http://ringfather.github.io/blog/2014/08/30/working-as-a-developer-for-rbc-capital-markets</id>
    <content type="html"><![CDATA[<p>A little over three months ago, I was fortunate enough to land a software development position at RBC Capital Markets. Yesterday was my last day, and I woke up this morning feeling a little nostalgic, so I decided to write this post to share my experience working as a software developer for RBC.</p>

<p>So what did I do in my three months? Well, here&rsquo;s the summary of duties and work performed that I put on my Practical Experience Form (PER) &ndash; a mandatory experience requirement that engineering students have to complete before graduating:</p>

<!--more-->


<ol>
<li>Applied TDD techniques to develop testing utility that is currently being used for over 80 business reports, directly identifying a critical bug before production release</li>
<li>Utilized OOP techniques to implement functional enhancements to web application used by entire team of 40+, which included designing SQL Server database tables, implementing an ORM and application logic, and designing a UI, automating 250+ tasks and directly reducing the time required to complete one of these tasks by 90%  on average</li>
<li>Built a data extraction utility to generate 1000+ pages of database documentation, directly facilitating data mapping tasks of a team of 4</li>
<li>Created and presented software enhancements proposal to two team leads resulting in approval to make enhancements to existing application</li>
</ol>


<p>A quick list of the tools and techniques I used include:</p>

<p>Visual Studio 2008 &amp; 2010, Microsoft SSRS, SSIS &amp; SSMS, API&rsquo;s (including Atlassian&rsquo;s Confluence and Microsoft SSRS), SQL Server, Test Driven Development, Unit Testing, Python, Object Oriented Programming, Subversion, Continuous Integration Tool (Jenkins)</p>

<p>If you&rsquo;ll notice, I actually did a lot of programming for RBC, for which I count myself extremely lucky. It was extremely satisfying to build the testing utility, and then see it run several times a day through our continuous integration testing tool and actually help us identify bugs in our reports. Similarly, creating and presenting a software enhancement proposal and then actually working on the enhancements and delivering a usable product during my term was extremely awesome.</p>

<p>Here are a few things I learned in the last three months:</p>

<ul>
<li>Your internship can be as good or bad as you make it. I remember there were some days where I wasn&rsquo;t assigned much work, but I went out of my way to bug my supervisor to give me more. This attitude of wanting to contribute definitely helped me get bigger projects to work on.</li>
<li>Ask people for help! I remember I was pretty intimidated by all the senior developer towards the beginning, but they were all actually very nice and willing to help. Some even went out of their way to help me out!</li>
<li>At the same time, try to figure things out on your own before asking for help. No one likes that co-op who asks trivial questions and wastes everyone&rsquo;s time. Google + Stack Overflow can answer 90%+ of your software problems. For the remaining 10%&ndash;, ask away.</li>
<li>Design your code. There are many ways to write a program, but I learned that picking which way is important. For instance, you probably want to use objects most of the time and modularize your code. You also want to write unit tests, lots of unit tests.</li>
<li>Version control is extremely important. Commit all your work, and make sure it passes the build tests before you go home for the day.</li>
</ul>


<p>All in all, I count my experience as very positive &ndash; I was given a chance to use what I learned in school to build solutions, and learned a ton about a field that I am considering for my career. I want to thank everyone who helped me during my time at RBC if they ever read this, and those who helped me get the job, you know who you are. This has definitely been one of my better summers (2012 was pretty awesome as well), and I look forward to the next one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expen$e: My First Web App]]></title>
    <link href="http://ringfather.github.io/blog/2014/08/14/expenSe-my-first-web-app/"/>
    <updated>2014-08-14T22:22:52-04:00</updated>
    <id>http://ringfather.github.io/blog/2014/08/14/expenSe-my-first-web-app</id>
    <content type="html"><![CDATA[<p>Project deployed at: <a href="http://ringocheung.pythonanywhere.com/ExpenSe/">Expen$e</a><br/>
Check out the code on Github <a href="https://github.com/ringocheung/ExpenSe ">here</a></p>

<p>The idea for <a href="http://ringocheung.pythonanywhere.com/ExpenSe/">Expen$e</a> came from a conversation with a friend about how difficult it is to record expenses with traditional apps. We quickly agreed on the annoyance of having to perform more than 2 actions to record an expense. It made no sense to me that an expense tracking app did not allow for easy expense tracking. As a user, I want to be able to record expenses as easily as possible. This desire drove two key design decisions: macros and single box input.</p>

<p>Macros are not anything new. They are typically used as shortcuts &ndash; in this case a letter replaces an expense name. Instead of having to type in &lsquo;utilities&rsquo;, Expen$e allows you to set the &lsquo;u&rsquo; macro to utilities and then type in &lsquo;u&rsquo; instead.</p>

<!--more-->


<p>To further optimize the recording process, only one input box is used &ndash; with no delimiters. This design decision makes it even easier to record and expense, instead of having to type &lsquo;u&rsquo; and &lsquo;15&rsquo; in separate boxes or even &lsquo;u/15&rsquo; in one box, Expen$e allows the user to type in &lsquo;u15&rsquo; in one box and it will recognize that the user is trying to record a utilities expense of $15. Descriptions are also supported in the following format: &lsquo;u15Electricity bill for the month of October&rsquo;. This meant a regex (always fun) in the decoding engine but the added simplicity for the user was in my opinion a good tradeoff.</p>

<p>The rest of the application is a pretty standard CRUD app, allowing users to set a recurring monthly budget and displaying how much is remaining/used out of that budget.</p>

<p>Lessons learned:<br/>
1. Web apps are really fun to build &ndash; Self-explanatory :)<br/>
2. The 80/20 rule is real &ndash; The last 20% of the app took 80% of the time. Well, that&rsquo;s an exaggeration but you get my point: It was a lot harder to implement &lsquo;details&rsquo; than it was to get the app working.<br/>
3. Make code as modular as you can &ndash; package related functions into modules, always try to build part by part and test your parts before putting them into the big machine. I was taught this in school but never realized how true it was until I actually needed to debug my app&hellip;<br/>
4. Use a file to log your progress and plan the application &ndash; This helped me a lot because I would sit down to work and already know what I needed to do instead of waste time thinking about what feature to implement every time.<br/>
5. Keep photos of progress and write the blog post AS I&rsquo;m doing the project, not after.</p>

<p>Biggest challenge: getting started.<br/>
Honestly had a tough time committing to this project. I was pretty tired after work every, getting home at 6:30 and wanting to just relax. You can even see from my github commits I was committing only once or twice a week for the first few weeks. However, once I started building more and more, I wanted to build more and more and put this thing together so I could use it (selfish, I know). By overcoming this challenge and actually completing this project, I feel like every other project I start will be easier because I know I&rsquo;ve completed one before and actually had a lot of fun.</p>

<p>Big thanks to the <a href="http://www.tangowithdjango.com/">tango with django tutorial</a> and <a href="http://www.pythonanywhere.com">Python Anywhere&rsquo;s hosting service</a>. Extremely helpful for building your first Django webapp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About]]></title>
    <link href="http://ringfather.github.io/blog/2014/05/27/about/"/>
    <updated>2014-05-27T13:20:41-04:00</updated>
    <id>http://ringfather.github.io/blog/2014/05/27/about</id>
    <content type="html"><![CDATA[<p>Hi there, I&rsquo;m Ringo and I study engineering science at the University of Toronto. In my first year of university, I learned how to write code and really enjoyed it. This summer, I am working for RBC full-time writing code in the Capital Markets division. Outside of school and work, I also paddle for the Iron Dragons, University of Toronto Engineering&rsquo;s dragon boat team. In my free time, I like to play and build with code, play board games or toss a disc around.</p>

<!--more-->


<p>I started this blog to share the projects that I work on, as well as my own engineering journey. I&rsquo;ve found a lot of other people&rsquo;s blogs to be extremely helpful as a budding software engineer and I want to share my knowledge &amp; experiences as well. Blogs like these make software such an awesome field because people are open to sharing what they know, ultimately driving the entire community of hackers forward. That is what this blog aspires to be.</p>

<p>Do not hesitate to contact me, whether for work-related inquiries or just to chat. You can hit me up on my Twitter or LinkedIn below. My portfolio will be out sometime before September.</p>

<p>Cheers,</p>

<p>Ringo</p>

<p>P.S. Huge thanks to Karen Keung, my awesome graphic designer friend. She designed this blog. Check out her work <a href="http://www.karenkeung.com/">here</a>, it&rsquo;s cool I promise. We only spent ~6 hours coding this blog up thanks to <a href="http://octopress.org/">Octopress</a> and <a href="https://github.com/vladigleba/readify">Readify</a>.</p>
]]></content>
  </entry>
  
</feed>
